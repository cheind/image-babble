/*! \mainpage ImageBabble
    \brief A small and efficient library to send and receive images over networks.
    \tableofcontents

    \section Introduction Introduction
    ImageBabble is a lightweight C++ library for efficient exchange of image data over networks. 
    The library targets applications in which services need to send large amount (image)data 
    to multiple clients. ImageBabble is designed for      
      - <b>fast exchange</b> The libary supports a fast stream based data exchange model.
      - <b>reliable exchange</b> The libary also supports a reliable data exchange model.
      - <b>extensibility</b> Adding new data-types to be exchanged is easily possible.
    
    \section FirstExample Example

    The following example demonstrates streaming of webcam data using ImageBabble. \note the example makes use of <a href="http://opencv.willowgarage.com/wiki/OpenCV">OpenCV</a>
    to access video devices and display images. The libary itself does not need OpenCV to run.
    
    First, make sure to include the library headers

    \snippet webcam_server.cpp Include Statement
    
    We will shorten the namespace ::imagebabble to something shorter

    \snippet webcam_server.cpp Namespace Abbrevation

    What follows is the entire server part in just a few of lines of code.

    \snippet webcam_server.cpp Example

    This gives you a full fletched image streaming server that can publish its data to any number of connected clients. Finally, we
    need to care about the client side. The client will receive images and display it to the user.

    \snippet webcam_client.cpp Example

    \par Example Code
    \link webcam_server.cpp \endlink
    \link webcam_client.cpp \endlink

    \section Installation Installation
    This section will guide you to setup your development environment to get started with ImageBabble.

    \subsection Prerequisites Prerequisites
    In order to use ImageBabble will need some pre-requisites.
     - ImageBabble is based on <a href="http://www.zeromq.org/">ZeroMQ</a>. In order to use it, you will
       need to have ZeroMQ >= 3.2.2 installed. It might work with 2.x versions as well, but we haven't yet
       tested. For later reference we will call the installation directory of ZeroMQ <code>ZMQ_ROOT</code>.

     - ImageBabble uses a couple of modern C++ features. You will need a compiler that supports the following
       <a href="http://en.wikipedia.org/wiki/C%2B%2B11">C++11</a> features: std::unordered_set, std::shared_ptr
       and rvalue references. To our knowledge GCC >= 4.2 and MSVC >= 10 should be ok.

     - ImageBabble itself. ImageBabble comes as a header-only implementation, so all you need to do is download/
       checkout ImageBabble to local directory of your choice. For later reference we will call this directory 
       <code>IMAGEBABBLE_ROOT</code>.

    \subsection CompilingLinking Compiling and Linking
    In order to use ImageBabble successfully from within your project, add the following include directories.

    \verbatim 
    <IMAGEBABBLE_ROOT>/inc 
    <ZMQ_ROOT>/include 
    \endverbatim

    Next, for the linking step you need to tell the linker to link against ZeroMQ Library. On Windows platforms, 
    you need to choose the correct configuration (debug/release) and MSVC version file. So, for example when
    using ZMQ 3.2.2 within a project created in MSVC10 (Microsoft Visual Studio 10) in release mode, you should 
    link against

    \verbatim <ZMQ_ROOT>/lib/libzmq-v100-mt-3_2_2.lib \endverbatim

    When you run your code, don't forget to copy the DLL (Windows only) to the executing directory

    \verbatim <ZMQ_ROOT>/lib/libzmq-v100-mt-3_2_2.dll \endverbatim
   
    \section ExchangeModes Exchange Modes
    ImageBabble transmits atomic messages such as images. The basic guarantee given by this framework
    is that either a complete messaage is received or no message at all. ImageBabble supports two message 
    exchange modes that map to two distinct use-cases.

    \subsection FastMode Fast Exchange Mode
    The fast exchange mode is best used when a lot of data is to be broadcast by the server to
    many clients and eventual message losts are acceptable. The fast exchange mode is based on 
    a publisher/subscriber pattern which avoids back-chatter. Its characteristics in detail are:
     - the server fans out frames to all connected clients,
     - the server does not block when no clients are connected,
     - the server does not care about processing speeds of clients,

    \note you should expect to lose frames at the client side when using the fast mode. Data can
    be lost at any time during the course of sending data. Expect it, it will happen. If that is
    not acceptable with your use-case, see \ref ReliableMode
        
    The fast protocol is thus best used when you want to transmit a lot images and when you 
    don't care about lost messages. This could be the case for streaming real-time image data 
    from a web-cam.

    \see imagebabble::fast_server
    \see imagebabble::fast_client
    
    \subsection ReliableMode Reliable Exchange Mode
    The second supported exchange mode is more reliable. It uses back-chatter to solve many of the 
    deficiencies of the fast model, thereby accepting a loss of performance. The characteristics are:
     - the server waits for a specified minimum number of clients to signal ready
     - the server does not send anything when the number of ready clients is not reached within the specified timeout slot 
     - the server sends data to all ready clients otherwise.
    
    \note in the reliable mode you will not lose frames at the client side due to full network queues. You might still lose 
    messages when a client disconnects after it signaled readiness.

    The reliable protocol is thus best used when you want to transmit a specific short sequence of images to at 
    least one client.

    \see imagebabble::reliable_server
    \see imagebabble::reliable_client

    \section NetworkProtocol Network Protocol
    The ImageBabble library is based on ZeroMQ. ZeroMQ is not a neutral carrier, but implements its functionality based 
    on protocol named ZMTP that sits on top of network protocols such as TCP.

    In order to transmit data via network interface boundaries, data needs to be serialized
    on one side and deserialized on the other endpoint. Such a serialization must pay attention to
     - the size of data types: the space occupied by an integer is not necessarily 32 bit.
     - the data endianness: i.e. the ordering of byte components.
     - the data packing: alignment boundaries for structure elements may differ leading to different data sizes.

    ImageBabble, by default, performs serialization by conversion to text. This will take more bytes on the network,
    but tackles the above mentioned problems.

    \note Certain data types like float and double have non-unique textual representations, because number of output 
          characters depends on the number of significant digits. In case bit-wise equality is needed, you should 
          provide your own serialization for such types. See \ref CustomDataTypes for details.

    The note above doesn't impose a problem for images, as the header to be serialized consists of (positive) integer values 
    only, which do have a unique textual representation. The image body, i.e. the data, is sent as a large binary block as
    provided by the user. No endianness conversion or interpretation is done on the image data block, which means that th
    caller is responsible for correct endianness. Most systems nowadays use little-endian, so you probably won't recognize
    any problems.

    \section AdvancedTopics Advanced Topics
    Here are a couple of advanced topics not covered in other sections.

    \subsection ImageGroups Sending and Receiving Image Groups
    In computer vision related applications it is often necessary, to transmit multiple images at once. Think
    about a modern RGBD camera, it provides an RGB and depth image at the same time. What you'd like todo is
    to pack those two images together and transmit it atomically as a single message. 

    Luckily, ImageBabble provides imagebabble::image_group for exactly this use-case. It allows you to pack
    multiple (named) images together and send/receive the group at once.

    \par Example Code
    \link imagegroup_server.cpp \endlink
    \link imagegroup_client.cpp \endlink

    \subsection CustomDataTypes Transmitting Custom Data Types
    Despite the fact ImageBabble was designed with image exchange in mind, it is not limited to image related
    use-cases. To the contrary you can transmit custom data types as long as you provide the necessary serialization methods.

    The following example shows how to transmit a custom data structure that contains personal information:

    \snippet customdata_server_client.cpp Data

    First, you need to provide send (for the server part) and receive (for the client part) methods inside the imagebabble::io namespace.

    \snippet customdata_server_client.cpp Serialization
    
    The \c send function passes the flag \c ZMQ_SNDMORE to other send functions to indicate that the message isn't complete yet and more data 
    is to come. The last send call forwards the input \c flags argument. Doing so, allows later methods to compose even more complex 
    structs based on \c person and reuse our functions. Also note that the \c friends field reuses a generic vector send implementation. 

    The \c recv function is the counterpart of \c send. It deserializes the data in the same order as it was serialized. 

    Finally, we provide the straight forward server 

    \snippet customdata_server_client.cpp Server

    and client functionality

    \snippet customdata_server_client.cpp Client

    The complete example can be found in \link customdata_server_client.cpp \endlink.

    \subsection ConnectingMultipleEndpoints Connecting to Multiple Endpoints
    Clients in the ImageBabble library have the possibility to receive data from multiple servers. In order to
    activate this behaviour, you would just call the imagebabble::fast_client::startup / imagebabble::reliable_client::startup method 
    multiple times. 

    Similarily you can call imagebabble::fast_server::startup / imagebabble::reliable_server::startup multiple times to publish data on
    multiple endpoints at once.

    \section Copyright Copyright Notice
    ImageBabble is provided for free under term of the new BSD license.

    \verbatim
    Copyright (c) 2013, PROFACTOR GmbH, Christoph Heindl
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.
        * Neither the name of PROFACTOR GmbH nor the
          names of its contributors may be used to endorse or promote products
          derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL PROFACTOR GmbH BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
    \endverbatim
*/